# -*- coding: utf-8 -*-
"""
/***************************************************************************
 geo_sentimentDialog
                                 A QGIS plugin
 geo_sentiment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-25
        git sha              : $Format:%H$
        copyright            : (C) 2023 by is_department
        email                : jackmahfouz766@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.utils import iface
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
import os
from qgis.core import ( QgsVectorLayer , QgsProject )
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'geo_sentiment_dialog_base.ui'))


class geo_sentimentDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(geo_sentimentDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.gobtn.clicked.connect(self.go_func)
    def go_func(self):
        layer = iface.activeLayer()
        query_neg = f"select * from "+layer.name()+" where sentiment like \'%negative%\'"
        query_pos = f"select * from "+layer.name()+" where sentiment like \'%positive%\'"
        query_neut = f"select * from "+layer.name()+" where sentiment like \'%neutral%\'"
        pos_layer = QgsVectorLayer("?query={}".format(query_pos), "positive", "virtual")
        neg_layer = QgsVectorLayer("?query={}".format(query_neg), "negative", "virtual")
        neut_layer = QgsVectorLayer("?query={}".format(query_neut), "neutral", "virtual")
        features = pos_layer.getFeatures()
        layers = [pos_layer, neg_layer, neut_layer]
        for i in layers:
            if not i:
                print("Layer failed to load!")
            else:
                QgsProject.instance().addMapLayer(i)
            